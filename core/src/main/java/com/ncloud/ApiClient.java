/*
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.ncloud;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.concurrent.CompletableFuture;

import org.apache.commons.lang3.StringUtils;

import com.ncloud.auth.Credentials;
import com.ncloud.auth.CredentialsProvider;
import com.ncloud.auth.CredentialsProviderChain;
import com.ncloud.auth.EnvironmentVariableCredentialsProvider;
import com.ncloud.auth.NcloudCredentialsProvider;
import com.ncloud.auth.ServerRoleCredentialsProvider;
import com.ncloud.exception.ApiException;
import com.ncloud.exception.SdkException;
import com.ncloud.marshaller.FormMarshaller;
import com.ncloud.marshaller.Marshaller;
import org.apache.hc.client5.http.async.methods.SimpleHttpRequest;
import org.apache.hc.client5.http.async.methods.SimpleHttpResponse;
import org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient;
import org.apache.hc.core5.concurrent.FutureCallback;
import org.apache.hc.core5.http.ContentType;
import org.apache.hc.core5.http.Header;
import org.apache.hc.core5.net.URIBuilder;

/**
 * The type Api client.
 */
public class ApiClient {
	private String apigatewayEndpoint = "https://ncloud.apigw.ntruss.com";
	private final String SDK_VERSION = "1.1";
	private final CloseableHttpAsyncClient httpClient;
	private final Set<Marshaller> marshallerSet;
	private CredentialsProvider credentialsProvider;
	private Credentials credentials;

	public ApiClient(CloseableHttpAsyncClient httpClient, Set<Marshaller> marshallerSet) {
		this(httpClient, marshallerSet, null);
	}

	public ApiClient(CloseableHttpAsyncClient httpClient, Set<Marshaller> marshallerSet, CredentialsProvider credentialsProvider) {
		if (marshallerSet.isEmpty()) {
			throw new SdkException("Marshaller is needed at least one.");
		}
		this.httpClient = httpClient;
		this.marshallerSet = marshallerSet;

		if (credentialsProvider == null) {
			CredentialsProviderChain providerChain = new CredentialsProviderChain(
				new EnvironmentVariableCredentialsProvider(),
				new NcloudCredentialsProvider(),
				new ServerRoleCredentialsProvider());
			this.credentials = providerChain.getCredentials();
			this.credentialsProvider = providerChain.getLastUsedProvider();
		} else {
			this.credentials = credentialsProvider.getCredentials();
			this.credentialsProvider = credentialsProvider;
		}

		String apigatewayEndpointEnvVar = System.getenv("NCLOUD_API_GW");
		if (StringUtils.isNotEmpty(apigatewayEndpointEnvVar)) {
			this.apigatewayEndpoint = apigatewayEndpointEnvVar;
		}
	}

	/**
	 * Call api response.
	 *
	 * @param <T>  the type parameter
	 * @param apiRequest the api request
	 * @return the api response
	 */
	public <T> CompletableFuture<ApiResponse<T>> call(ApiRequest apiRequest) {
		return call(apiRequest, null);
	}

	/**
	 * Call api response.
	 *
	 * @param <T>  the type parameter
	 * @param apiRequest the api request
	 * @param returnType the return type
	 * @return the api response
	 */
	public <T> CompletableFuture<ApiResponse<T>> call(ApiRequest apiRequest, Class returnType) {
		SimpleHttpRequest request = makeRequest(apiRequest);
		return getResponse(request).thenApply((response) -> {
			Map<String, List<String>> headers = new HashMap<>();
			for (Header item : response.getHeaders()) {
				headers.compute(item.getName(), (k, v) -> {
					if (v == null) {
						v = new ArrayList<>();
					}
					v.add(item.getValue());
					return v;
				});
			}
			if (response.getCode() < 200 || response.getCode() >= 300) {
				throw new ApiException("The response failed", response.getCode(), headers, new ByteArrayInputStream(response.getBodyBytes()));
			}
			try {
				if (returnType == null) {
					return new ApiResponse(response.getCode(), headers, null);
				}
				if (returnType == byte[].class) {
					return new ApiResponse(response.getCode(), headers, new ByteArrayInputStream(response.getBodyBytes()));
				}

				String contentType = Optional.ofNullable(response.getContentType()).map(ContentType::toString).orElse(null);
				Marshaller marshaller = getMarshaller(contentType);
				T responseBody = marshaller.readValue(new ByteArrayInputStream(response.getBodyBytes()), returnType);
				return new ApiResponse(response.getCode(), headers, responseBody);
			} catch (Exception e) {
				throw new ApiException(
						"Failed to deserialize response: " + e.getMessage(),
						response.getCode(), headers, new ByteArrayInputStream(response.getBodyBytes()));
			}
		});
	}

	/**
	 * Select header accept string.
	 *
	 * @param accepts the accepts
	 * @return the string
	 */
	public String selectHeaderAccept(String[] accepts) {
		return selectHeaderContentType(accepts);
	}

	/**
	 * Select header content type string.
	 *
	 * @param contentTypes the content types
	 * @return the string
	 */
	public String selectHeaderContentType(String[] contentTypes) {
		for (String contentType : contentTypes) {
			try {
				return getMarshaller(contentType).getContentType();
			} catch (SdkException e) {
			}
		}
		if (contentTypes.length > 0) {
			return contentTypes[0];
		}
		return marshallerSet.iterator().next().getContentType();
	}

	private SimpleHttpRequest makeRequest(ApiRequest apiRequest) {
		try {
			SimpleHttpRequest request = SimpleHttpRequest.create(
					apiRequest.getMethod(),
					getUrl(apiRequest)
			);
			applyHeaders(request, apiRequest.getHttpHeaders());
			RequestBody body = getRequestBody(apiRequest);
			if (body != null) {
				request.setBody(body.body, body.contentType);
			}
			Credentials credentials = loadCredentials();
			credentials.applyCredentials(request, apiRequest.isRequiredApiKey());
			return request;
		} catch (Exception e) {
			throw new SdkException("Failed to create request: " + e.getMessage(), e);
		}
	}

	private Credentials loadCredentials() {
		if (credentialsProvider instanceof ServerRoleCredentialsProvider) {
			Credentials credentials = credentialsProvider.getCredentials();
			if (credentials == null) {
				throw new SdkException("Unable to load credentials.");
			}
			this.credentials = credentials;
		}
		return this.credentials;
	}

	private String getUrl(ApiRequest apiRequest) throws IOException {
		try {
			URIBuilder httpUrlBuilder = new URIBuilder(this.apigatewayEndpoint + apiRequest.getBasePath() + apiRequest.getPath());

			Map<String, Object> queryParams = apiRequest.getQueryParams();
			if (apiRequest.isCustomFormParams() && apiRequest.getMethod().equalsIgnoreCase("GET")) {
				Marshaller marshaller = FormMarshaller.getInstance();
				return httpUrlBuilder.build().toString() + "?" + marshaller.writeValueAsString(apiRequest.getBody());
			}
			for (Map.Entry<String, Object> entry : queryParams.entrySet()) {
				if (entry.getValue() instanceof Collection) {
					for (Object value : (Collection)entry.getValue()) {
						httpUrlBuilder.addParameter(entry.getKey(), String.valueOf(value));
					}
				} else {
					httpUrlBuilder.addParameter(entry.getKey(), String.valueOf(entry.getValue()));
				}
			}
			return httpUrlBuilder.build().toString();
		} catch (URISyntaxException e) {
			throw new RuntimeException(e);
		}
	}

	private void applyHeaders(SimpleHttpRequest request, Map<String, Object> headers) {
		request.setHeader("x-ncp-apigw-sdk-version", SDK_VERSION);
		for (Map.Entry<String, Object> entry : headers.entrySet()) {
			request.addHeader(entry.getKey(), parameterToString(entry.getValue()));
		}
	}

	private RequestBody getRequestBody(ApiRequest apiRequest) throws IOException {
		String contentType = String.valueOf(apiRequest.getHttpHeaders().get("content-type"));
		Map formParams = apiRequest.getFormParams();
		Object body = apiRequest.getBody();

		if (apiRequest.isCustomFormParams() && apiRequest.getMethod().equalsIgnoreCase("GET")) {
			return null;
		}
		if (contentType.startsWith("application/x-www-form-urlencoded")
			&& !apiRequest.isCustomFormParams()) {
			return new RequestBody(ContentType.parse(contentType), getUrlencodedParams(formParams));
		}
		if (body == null) {
			if (!permitsRequestBody(apiRequest.getMethod())) {
				return null;
			} else if (requiresRequestBody(apiRequest.getMethod())) {
				return new RequestBody(ContentType.parse(contentType), "");
			}
		}
		if (body instanceof byte[]) {
			return new RequestBody(ContentType.parse(contentType), (byte[])body);
		}

		Marshaller marshaller = getMarshaller(contentType);
		return new RequestBody(ContentType.parse(marshaller.getContentType()), marshaller.writeValueAsString(body));
	}

	static boolean permitsRequestBody(String method) {
		return !(method.equals("GET") || method.equals("HEAD"));
	}

	static boolean requiresRequestBody(String method) {
		return method.equals("POST") || method.equals("PUT") || method.equals("PATCH") || method.equals("PROPPATCH") || method.equals("REPORT");
	}

	private String getUrlencodedParams(Map<String, Object> formParams) throws UnsupportedEncodingException {
		StringBuilder formParamBuilder = new StringBuilder();

		for (Map.Entry<String, Object> param : formParams.entrySet()) {
			if (param.getValue() instanceof Collection) {
				for (Object value : (Collection)param.getValue()) {
					formParamBuilder.append(URLEncoder.encode(param.getKey(), "utf8"))
						.append("=")
						.append(URLEncoder.encode(String.valueOf(value), "utf8"));
					formParamBuilder.append("&");
				}
			} else {
				formParamBuilder.append(URLEncoder.encode(param.getKey(), "utf8"))
					.append("=")
					.append(URLEncoder.encode(String.valueOf(param.getValue()), "utf8"));
				formParamBuilder.append("&");
			}
		}

		String encodedFormParams = formParamBuilder.toString();
		if (encodedFormParams.endsWith("&")) {
			encodedFormParams = encodedFormParams.substring(0, encodedFormParams.length() - 1);
		}

		return encodedFormParams;
	}

	private String parameterToString(Object param) {
		if (param == null) {
			return null;
		} else if (param instanceof Collection) {
			StringBuilder b = new StringBuilder();
			for (Object o : (Collection<?>)param) {
				if (b.length() > 0) {
					b.append(',');
				}
				b.append(String.valueOf(o));
			}
			return b.toString();
		} else {
			return String.valueOf(param);
		}
	}

	private CompletableFuture<SimpleHttpResponse> getResponse(SimpleHttpRequest request) {
		CompletableFuture<SimpleHttpResponse> promise = new CompletableFuture<>();
		httpClient.execute(request, new FutureCallback<SimpleHttpResponse>() {
			@Override
			public void completed(SimpleHttpResponse simpleHttpResponse) {
				promise.complete(simpleHttpResponse);
			}

			@Override
			public void failed(Exception e) {
				promise.completeExceptionally(e);
			}

			@Override
			public void cancelled() {
				promise.completeExceptionally(new SdkException("cancelled"));
			}
		});
		return promise;
	}

	private Marshaller getMarshaller(String contentType) {
		ContentType parsed = ContentType.parse(contentType);
		for (Marshaller marshaller : marshallerSet) {
			if (ContentType.parse(marshaller.getContentType()).getMimeType().equals(parsed.getMimeType())) {
				return marshaller;
			}
		}
		throw new SdkException("Unsupported media type: " + contentType);
	}

	static class RequestBody {
		ContentType contentType;
		byte[] body;

		RequestBody(ContentType contentType, String body) {
			this.contentType = contentType;
			this.body = body.getBytes(contentType.getCharset(StandardCharsets.UTF_8));
		}

		public RequestBody(ContentType contentType, byte[] body) {
			this.contentType = contentType;
			this.body = body;
		}
	}
}
